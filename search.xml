<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Integer.ValueOf()引发的血案</title>
      <link href="/wanghao221.github.io/2020/04/21/Integer-ValueOf-%E5%BC%95%E5%8F%91%E7%9A%84%E8%A1%80%E6%A1%88/"/>
      <url>/wanghao221.github.io/2020/04/21/Integer-ValueOf-%E5%BC%95%E5%8F%91%E7%9A%84%E8%A1%80%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200421145859950.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MTA4Ng==,size_16,color_FFFFFF,t_70" alt=""><br>这道题有的人或许做过，也可能选对，但是这其中的道理你却不一定理解，在这里大牛走过，小白留下一起学习。</p><p>先来分析选型A，Integer i01 = 59，是一个装箱的过程，在进行i01 == i02的比较过程中，因为右边是整型，发生了拆箱的动作，所以进行了值得比较，所以返回true。</p><p>在这里拿出Integer a = 59，Integer b = 59，这种又会出现什么状况呢，如果按照装箱和拆箱来看就是true，如果按照对象来看，就是false，在你举棋不定得时候你就应该看看源码了。</p><pre><code>private static class IntegerCache {    static final int low = -128;    static final int high;    static final Integer cache[];    static {        // high value may be configured by property        int h = 127;        String integerCacheHighPropValue =            sun.misc.VM.getSavedProperty(&quot;java.lang.Integer.IntegerCache.high&quot;);        if (integerCacheHighPropValue != null) {            try {                int i = parseInt(integerCacheHighPropValue);                i = Math.max(i, 127);                // Maximum array size is Integer.MAX_VALUE                h = Math.min(i, Integer.MAX_VALUE - (-low) -1);            } catch( NumberFormatException nfe) {                // If the property cannot be parsed into an int, ignore it.            }        }        high = h;        cache = new Integer[(high - low) + 1];        int j = low;        for(int k = 0; k &lt; cache.length; k++)            cache[k] = new Integer(j++);        // range [-128, 127] must be interned (JLS7 5.1.7)        assert IntegerCache.high &gt;= 127;    }    private IntegerCache() {}}</code></pre><p>这个类是Integer类中的一个静态内部类，其中的静态代码块在类进行加载的时候就进行了-127-128这些数字的创建和保存，将他们的引用全部保存在Cache数组中。</p><p>所以当用Integer 声明初始化变量时，会先判断所赋值的大小是否在-128到127之间，若在，则利用静态缓存中的空间并且返回对应cache数组中对应引用，存放到运行栈中，而不再重新开辟内存。</p><p>这里你就懂了吧，Integer a = 59，Integer b = 59返回的就是true，Integer a = 300，Integer b = 300在判断完之后就会new出来一个新的对象，所以会返回false。<br>    public static Integer valueOf(int i) {<br>        if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)<br>            return IntegerCache.cache[i + (-IntegerCache.low)];<br>        return new Integer(i);<br>    }<br>和上面的一样，int进去之后首先进行判断，如果在-128-127之间就会返回引用，否则就在堆上new出来对象。所以B选项返回true。</p><p>C选项i03返回的是Cache数组中的引用，而i04返回的是堆上对象的引用，所以返回的是false。</p><p> System.out.println(i02== i04) i02是整型变量，i04是引用，这里又用到了解包，虚拟机会把i04指向的数据拆箱为整型变量再与之比较，所以比较的是数值，59==59，返回true.</p><p>————————————————<br>版权声明：本文为CSDN博主「小白又开始整活了」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/weixin_43271086/article/details/105658354" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43271086/article/details/105658354</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>优秀的程序员一定要有自己的博客!</title>
      <link href="/wanghao221.github.io/2020/04/20/%E4%BC%98%E7%A7%80%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%91%98%E4%B8%80%E5%AE%9A%E8%A6%81%E6%9C%89%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
      <url>/wanghao221.github.io/2020/04/20/%E4%BC%98%E7%A7%80%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%91%98%E4%B8%80%E5%AE%9A%E8%A6%81%E6%9C%89%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<ol><li>文本标签</li></ol><ul><li>内容标题h1-h6： 独占一行  自带上下间距  字体加粗    字体从大到小 </li><li>段落标签p ： 独占一行  自带上下间距  </li><li>换行 br</li><li>水平分割线hr</li><li>字体相关： b加粗 i斜体 small小字  s删除线  u下划线 </li></ul><ol start="2"><li>列表标签</li></ol><ul><li>无序列表： ul：type li</li><li>有序列表： ol：type start reversed  li</li><li>列表嵌套： 有序和无序可以任意无限嵌套</li></ul><ol start="3"><li>图片标签img</li></ol><ul><li>src：路径<br>  相对路径：访问站内资源时使用<pre><code>- 图片和页面在同一目录： 直接写图片名- 图片在页面的上级目录时：../图片名- 图片在页面的下级目录时：文件夹名/图片名  。。。...</code></pre>  绝对路径:访问站外资源时使用, 称为图片盗链,可以节省本站资源,但是有找不到图片的风险</li><li>alt: 图片不显示时显示的文本</li><li>title: 鼠标在图片上悬停时显示的文本</li><li>width/height: 两种赋值方式:1. 像素  2.百分比  ,如果只设置宽度高度会自动等比例缩放</li></ul><ol start="4"><li>超链接a</li></ol><ul><li>href: 路径, 可以指向页面或其它文件(浏览器支持浏览则浏览,不支持则下载)</li><li>包裹文本就是文本超链接,包裹图片就是图片超链接</li><li>页面内部跳转, <a href="#top">回到顶部</a>    <xxx id="top"></li></ul><ol start="5"><li>表格table</li></ol><ul><li>标签: table  tr表示行  td表示列  th表头(加粗并居中)  caption表格标题</li><li>属性: table:border边框  cellspacing单元格间距  cellpadding单元格距内容的距离</li></ul><ol start="6"><li>表单form</li></ol><ul><li><p>学习表单就是学习表单中的各种控件</p></li><li><p>文本框 &lt;input type=”text” name placeholder占位文本 value值&gt;</p></li><li><p>密码框 <input type="password" name placeholder value></p></li><li><p>单选<input type="radio" name value  checked="checked" id="abc"><lable for="abc">让文本也能点击</label></p></li><li><p>多选<input type="checkbox" name value  checked="checked"></p></li><li><p>文件选择器<input type="file" name ></p></li><li><p>日期选择器<input type="date" name ><br>###表单续</p><pre><code>&lt;form action=&quot;http://www.tmooc.cn&quot; method=&quot;get&quot;&gt;    &lt;!-- 下拉选 --&gt;    所在城市:&lt;select name=&quot;city&quot;&gt;        &lt;option value=&quot;bj&quot;&gt;北京&lt;/option&gt;        &lt;!-- selected默认选中 --&gt;        &lt;option value=&quot;sh&quot; selected=&quot;selected&quot;&gt;上海&lt;/option&gt;        &lt;option value=&quot;gz&quot;&gt;广州&lt;/option&gt;    &lt;/select&gt;&lt;br&gt;    &lt;!-- 文本域 rows行  cols列--&gt;    自我介绍:&lt;textarea name=&quot;intro&quot; rows=&quot;3&quot; cols=&quot;20&quot;            placeholder=&quot;说点儿啥...&quot;&gt;&lt;/textarea&gt;    &lt;!-- 提交按钮 --&gt;    &lt;input type=&quot;submit&quot; value=&quot;注册&quot;/&gt;    &lt;!-- 重置按钮 --&gt;    &lt;input type=&quot;reset&quot; /&gt;    &lt;!-- 自定义按钮 --&gt;    &lt;input type=&quot;button&quot; value=&quot;按钮&quot; /&gt;    &lt;button type=&quot;button&quot;&gt;按钮&lt;/button&gt;&lt;/form&gt;</code></pre><p>###实体引用(特殊字符)</p></li><li><p>空格:空格折叠现象就是多个空格连续出现只能识别一个   &nbsp;</p></li><li><p>小于号: &lt;</p></li><li><p>大于号: &gt;<br>###分区标签</p></li><li><p>分区标签可以理解成是一个容器,将多个有相关性的标签放进一个容器,可以对多个标签进行统一管理</p></li><li><p>div:块级分区元素,特点:独占一行</p></li><li><p>span:行内分区元素,特点:共占一行</p></li><li><p>html5标准中新增的分区标签 作用和div一样: header头  footer脚  article正文  nav导航  section区域</p>  <div>头</div>  <div>体</div>  <div>脚</div>  <header></header>  <nav></nav>  <article></article>或<section></section>  <footer></footer></li></ul><p>###CSS</p><ul><li>Cascading Style Sheet:层叠样式表,作用:是用于美化页面的</li><li>如何在html页面中添加CSS样式代码?<ol><li>内联样式:在标签的style属性中添加样式代码,不可以复用 使用较少</li><li>内部样式: 在head标签里面添加style标签 标签体内写样式代码，可以在当前页面复用,这种写法学习使用较多,工作中使用较少</li><li>外部样式: 在单独的css样式文件中写样式代码,通过link标签引入,好处:可以多页面复用,可以将html和css代码分离开<br>###选择器</li></ol></li></ul><ol><li>标签名选择器</li></ol><ul><li>格式: 标签名{样式代码}</li><li>作用: 选取页面中所有同名标签</li></ul><ol start="2"><li>id选择器</li></ol><ul><li>格式: #id{样式代码}</li><li>作用: 选取页面中指定id的元素(id必须唯一)</li></ul><ol start="3"><li>class选择器</li></ol><ul><li>格式: .class{样式代码}</li><li>作用: 选取页面中指定class值得多个元素</li></ul><ol start="4"><li>分组选择器</li></ol><ul><li>格式: div,#abc,.c1{样式代码}</li><li>作用: 将多个选择器合并成一个选择器</li></ul><ol start="5"><li>属性选择器</li></ol><ul><li>格式: 元素名[属性名=’值’]{样式代码}</li><li>作用:选取页面中所有指定属性名和值得元素</li></ul><ol start="6"><li>任意元素选择器</li></ol><ul><li>格式: *{样式代码}</li><li>作用: 选取页面中所有的元素</li></ul><p>####练习要求</p><ol><li>水煮鱼为红色字</li><li>红烧肉 水煮鱼 宫保鸡丁背景蓝色</li><li>文本框背景绿色</li><li>d2字体绿色</li><li>d3 s3 h3 字体紫色purple</li><li>d3 s3 h3 d2 s1 s2 s3 背景绿色</li><li>所有元素添加蓝色实线边框<br>###选择器续</li><li>子孙后代选择器</li></ol><ul><li>格式: body div span{样式代码}</li><li>作用:选取body里面div里面所有span(包括所有后代)</li></ul><ol start="2"><li>子元素选择器</li></ol><ul><li>格式: body&gt;div&gt;span{样式代码}</li><li>作用:选取body里面的div里面的所有子元素span</li></ul><ol start="3"><li>伪类选择器</li></ol><ul><li>该选择器选择的是元素的状态: 鼠标悬停状态 点击状态 未访问状态 访问过</li><li>格式: a:hover/active/link/visited{}<br>###选择器回顾</li></ul><ol><li>id选择器    #id{}</li><li>标签名选择器   div{}</li><li>class选择器   .class{}</li><li>分组选择器   #id,div,.class{}</li><li>属性选择器   input[type=’button’]{}</li><li>任意元素选择器   *{}</li><li>子孙后代选择器  div span{}</li><li>子元素选择器   div&gt;span{}</li><li>伪类选择器   a:visited访问过/link未访问/hover悬停/active点击{}<br>###颜色赋值方式</li></ol><ul><li>三原色: red green blue  任何颜色都是三原色组成,每个颜色的取值0-255    </li></ul><ol><li>颜色单词赋值 red</li><li>6位16进制赋值 每两位表示一个颜色  #ff0000</li><li>3位16进制 每一位重复    #f00等效#ff0000</li><li>3位10进制赋值     rgb(255,0,0)</li><li>4位10进制赋值   rgba(255,0,0,0-1)  a=alpha透明度  值越小越透明<br>###背景图片</li></ol><ul><li>设置背景图片<br>  background-image: url(../imgs/1.jpg);</li><li>设置背景图片尺寸<br>  background-size: 100px 80px;  //只给宽度赋值 高度auto 可以保证图片原始宽高比</li><li>禁止重复<br>  background-repeat:no-repeat;</li><li>背景图片的位置<br>  background-position:横向百分比  纵向百分比<br>###元素的显示方式display</li></ul><ol><li>block: 块级元素,独占一行,可以修改宽高 包括:div h1-h6 p hr</li><li>inline:行内元素,共占一行,不能修改宽高 包括:span b i small s u  超链接a</li><li>inline-block:行内块元素,共占一行,也可以修改宽高: 图片img input<br>###文本和字体相关样式</li><li>*水平对齐方式 text-align:left/right/center</li><li>*文本修饰:text-decoration: overline上划线/underline下划线/line-through删除线/none去掉文本修饰</li><li>文本阴影:text-shadow: 颜色 x偏移值 y偏移值 浓度(值越小越清晰)</li><li>*行高:line-height:30px; 可以通过行高实现文本垂直居中</li><li>*文本颜色: color:red;</li><li>*字体大小: font-size:20px;</li><li>*加粗:  font-weight:bold/normal(去掉字体加粗)</li><li>斜体:  font-style:italic;</li><li>字体设置: font-family:xxx,xxx,xxx;    font:20px xxx,xxx,xxx; </li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 玛卡巴卡米卡拉卡嗡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS</title>
      <link href="/wanghao221.github.io/2020/04/20/index/"/>
      <url>/wanghao221.github.io/2020/04/20/index/</url>
      
        <content type="html"><![CDATA[<p>###CSS的三大特性</p><ol><li>继承性:元素可以继承上级元素的文本和字体相关样式. 部分元素自身效果不受继承影响比如:h1-h6的字体大小,超链接字体颜色.</li><li>层叠性:多个选择器有可能选择到同一个元素,如果添加的样式不同会全部层叠生效,如果添加的样式相同则由优先级决定</li><li>优先级:作用范围越小,优先级越高.   id&gt;class&gt;标签名&gt;继承(属于间接选中)<br>###盒子模型</li></ol><ul><li>盒子模型=外边距+边框+内边距+宽高</li><li>宽高: 用来控制元素显示大小</li><li>边框: 控制元素的边框效果</li><li>外边距: 控制元素显示位置</li><li>内边距: 控制元素内容的位置<br>###盒子模型之宽高</li><li>赋值方式:两种</li></ul><ol><li>像素,单位是px</li><li>上级元素的百分比 </li></ol><ul><li>如果只设置宽度高度会等比例缩放</li><li>行内元素不能修改宽高<br>###盒子模型之外边距margin</li><li>什么是外边距: 元素距上级元素或相邻兄弟元素的距离称为外边距 </li><li>赋值方式:<ol><li>单独给某一个方向赋值:  margin-left/right/top/bottom:10px;</li><li>四个方向赋值: margin:50px;      </li><li>上下和左右赋值: margin:10px 20px;   元素水平居中 margin:0 auto; (注意这是让元素自身居中,text-align:center是让元素里面的文本在元素内部居中)</li><li>上右下左赋值: margin:10px 20px 30px 40px;  顺时针      </li></ol></li><li>上下相邻两个元素的外边距取最大值,左右相邻求和</li><li>粘连问题: 当元素的上边缘和上级元素的上边缘重叠时,给元素添加上外边距会出现粘连显示异常,给上级元素添加overflow:hidden解决,给上级元素添加边框也可以解决(修改了元素原来的样子,不推荐)</li><li>h1,p,body这些元素自带外边距,使用时需要注意.<br>###盒子模型之边框border</li><li>赋值方式: <ol><li>单独给某一个边添加边框   border-left/right/top/bottom: 粗细 样式 颜色;</li><li>给四个方向添加边框   border:粗细 样式 颜色;</li></ol></li><li>圆角: border-radius: 10px; 值越大越圆 超过宽高的一半时会变为圆形(前提是正方形)<br>###盒子模型之内边距padding</li><li>什么是内边距: 元素边缘距内容的距离称为内边距.</li><li>赋值方式和外边距类似: <ol><li>单独给某一个方向赋值:  padding-left/right/top/bottom:10px;</li><li>四个方向赋值: padding:50px;      </li><li>上下和左右赋值: padding:10px 20px;  </li><li>上右下左赋值: padding:10px 20px 30px 40px;  顺时针   </li></ol></li><li>修改元素的内边距会影响元素的宽高</li><li>如果需要移动元素内的子元素有两种方式:<ol><li>给大元素添加内边距去移动里面的小元素,这种方式会改变大元素的尺寸(不推荐使用)</li><li>给小元素添加外边距即可.</li></ol></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>定位方式4+1</title>
      <link href="/wanghao221.github.io/2020/04/20/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
      <url>/wanghao221.github.io/2020/04/20/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>###position定位</p><ol><li>静态定位(文档流定位):是元素的默认定位方式</li></ol><ul><li>格式:position:static</li><li>元素显示特点: 块级元素从上到下排列,行内或行内块元素从左向右排列,元素不易实现层叠效果</li><li>如何控制元素的位置: 通过外边距.</li></ul><ol start="2"><li>相对定位</li></ol><ul><li>格式:position:relative</li><li>元素显示特点: 元素不脱离文档流(元素不管显示到什么位置 仍然占着原来的位置) </li><li>如何控制元素的位置: 通过top/left/right/bottom控制元素的显示位置,坐标相对于初始位置</li><li>应用场景: 当需要移动某个元素,但移动该元素时不影响其它元素的显示效果,这时使用相对定位,如果做位置微调使用相对定位</li></ul><ol start="3"><li>绝对定位</li></ol><ul><li>格式: position:absolute</li><li>元素显示特点: 元素脱离文档流(当元素设置为绝对定位时会让出自己所占的位置)</li><li>如何控制元素的位置: 通过top/left/right/bottom控制元素位置,坐标相对于窗口(默认)或某一个上级元素(添加相对定位)</li><li>应用场景:如果移动到的位置是某个上级元素的角落使用绝对定位,如果需要往页面中添加一个元素而且不希望影响现有的显示效果(也就是不在文档流里面)使用绝对定位</li></ul><ol start="4"><li>固定定位</li></ol><ul><li>格式: position:fixed;</li><li>元素显示特点: 元素脱离文档流</li><li>如何控制位置: 通过top/left/rigth/bottom控制元素位置,坐标相对于窗口.</li><li>应用场景: 需要将元素固定在窗口的某个位置,并且不随着内容位置改变而改变</li></ul><p>####浮动定位</p><ul><li>格式: float:left/right;</li><li>显示特点: 元素脱离文档流,元素从当前行向左或向右浮动,当撞到上级元素边缘或其它浮动元素时停止</li><li>如何控制元素位置: 通过外边距</li><li>如果元素的所有子元素全部浮动,则元素自动识别的高度为0,通过给元素添加overflow:hidden解决.</li><li>应用场景: 当需要将纵向排列的元素改成横向排列时使用浮动定位<br>###行内元素的对齐方式vertical-align</li><li>top 顶部对齐</li><li>bottom 底部对齐</li><li>middle 中间对齐</li><li>baseline 基线对齐(默认)<br>####布局练习步骤:</li></ul><ol><li>给big设置宽度1000  并通过外边距0 auto居中</li><li>第一行里的div设置宽高一个左边浮动 一个右边浮动</li><li>第一行和第二行div都设置overflow:hidde</li><li>第二行里面的div设置宽高,一个左边浮动,剩下3个<br>右边浮动</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/wanghao221.github.io/2020/04/19/hello-world/"/>
      <url>/wanghao221.github.io/2020/04/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>欢迎 <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! 这是我的第一篇文章. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
